get:
  operationId: getRealTimeProposalStatus
  summary: Obtain the status of the Ratings Provider's Real-Time proposals
  description: |

    Used to obtain the status of real-time ratings proposals. The response is
    implicitly restricted to the requesting Ratings Provider's obligation.
    Accordingly, the caller can use this endpoint to check the state of their
    proposal submission.

    Note that the same status object is returned for each
    `postRealTimeProposal`, so this endpoint may seem redundant. However,
    an anticipated use case for this `GET` endpoint is to support supervisor
    processes that are setup by the client to independently ensure the provider's process for
    rating submission if functioning properly. For example, the Rating Provider
    might have one program responsible for producing and submitting Ratings
    via `postRealTimeProposal`, while having a separate
    monitoring job that checks this endpoint regularly.

    Clients SHOULD perform Conditional `GET` using the `If-None-Match` header
    and the `ETag` of a previous `GET` response to poll this endpoint. Rate
    limiting is done on a per Ratings Provider basis, so requests from
    independent clients used by the same provider count against the same quota.

  tags: &tags
    - Real-Time
  responses:
    '200':
      description: OK
      content:
        application/vnd.trolie.rating-realtime-proposal-status.v1+json:
          schema:
            $ref: ../components/schemas/array-max-monitored-elements.yaml#/real-time-proposal-status
          example:
            $ref: ../../example-narratives/examples/realtime-proposal-status.json
      headers:
        $ref: '../openapi-split.yaml#/components/responses/204/headers'

    '304':
      $ref: '../openapi-split.yaml#/components/responses/304'
    '400': &malformed
      $ref: '../openapi-split.yaml#/components/responses/400-problem'
    '401': &unauthorized-empty
      $ref: '../openapi-split.yaml#/components/responses/401-empty'
    '403': &forbidden-empty
      $ref: '../openapi-split.yaml#/components/responses/403-empty'
    '406': &not-acceptable-empty
      $ref: '../openapi-split.yaml#/components/responses/406-empty'
    '429': &rate-limit-hit
      $ref: '../openapi-split.yaml#/components/responses/429-empty'
    '500': &unexpected-error-empty
      $ref: '../openapi-split.yaml#/components/responses/500-empty'
    default: *unexpected-error-empty
  security:
    - oauth2-primary-flow:
        - read:realtime-proposals
post:
  operationId: postRealTimeProposal
  summary: Submit Real-Time Rating Proposal
  description: |

    At the discretion of the TROLIE server owner, Ratings Providers use 
    this endpoint to submit ratings within the current hour.  
    These are assumed to be real-time ratings, based on measurements
    of ambient conditions as opposed to forecasts.  These ratings will be 
    used by Transmission Providers in real-time grid operations processes, 
    such as state estimator and real-time markets.  The clearinghouse for real-time ratings
    may be run more frequently than the one for forecast ratings to adapt to real-world 
    conditions.  

    These ratings may be either AARs or DLRs.  

    The API mechanics are different than forecasts, as there is no implicitly created
    time window to modify.  Ratings providers simply `POST` new values as they are measured and computed.  

    Rules for usage however are similar to forecasts; real-time proposals do not have to contain
    every resource for which the Ratings Provider is responsible.  Data may be broken into batches
    across the Rating Provider's footprint.  

    Status of the real-time proposals also includes an indication of incomplete obligations, much
    like forecast.  However, the meaning of this is somewhat different, as it simply indicates 
    data that is either completely missing, or is considered stale by the Clearinghouse Provider,
    likely due to simply not receiving a value within a reasonable period, such as an hour.  

  tags: *tags

  requestBody:
    required: true
    content:
      application/vnd.trolie.rating-realtime-proposal.v1+json:
        schema: 
          $ref: "../components/schemas/array-max-monitored-elements.yaml#/realtime-proposal"
        example:
          $ref: ../../example-narratives/examples/realtime-proposal.json
  responses:
    '202':
      description: |

        Accepted. The update was accepted for later processing by the Clearinghouse.
        Updates to ratings may need to undergo additional validation and
        propagation to other systems.

      content:
        application/vnd.trolie.rating-realtime-proposal-status.v1+json:
          schema:
            $ref: ../components/schemas/array-max-monitored-elements.yaml#/real-time-proposal-status
          example:
            $ref: ../../example-narratives/examples/realtime-proposal-status.json            
      headers:
        $ref: '../openapi-split.yaml#/components/responses/204/headers'

    '400': *malformed
    '401': *unauthorized-empty
    '403': *forbidden-empty
    '406': *not-acceptable-empty
    '413':
      $ref: '../openapi-split.yaml#/components/responses/413-empty'
    '415':
      $ref: '../openapi-split.yaml#/components/responses/415-problem'      
    '422':
      description: |

          Unprocessable Content. The Real-Time Ratings Proposal may 
          not utilize units that are not permitted by the
          Clearinghouse Provider. Check the response for details. Ratings
          Providers should impute recourse ratings as necessary to ensure their
          proposals are complete, i.e., the entire Ratings Obligation is met.

      content:
        application/problem+json:
          schema:
            $ref: '../openapi-split.yaml#/components/schemas/problem'
          # ideally this would be examples (plural) and include both invalid units and incomplete proposal
          # but `redocly bundle` extracts examples as standalone components/examples in the consolidated spec
          # and unfortunately `redocly lint` then gives validation errors on those examples
          #
          #examples:
          #  invalid-units:
          #    $ref: '../../articles/examples/proposal-invalid-units.json'
          #  incomplete-proposal:
          #    $ref: '../../articles/examples/incomplete-proposal.json'
          example:
            $ref: '../../articles/examples/incomplete-proposal.json'
      headers:
        $ref: '../openapi-split.yaml#/components/responses/304/headers'
    '429': *rate-limit-hit
    '500': *unexpected-error-empty
    default: *unexpected-error-empty
  security:
    - oauth2-primary-flow:
        - write:realtime-proposals
