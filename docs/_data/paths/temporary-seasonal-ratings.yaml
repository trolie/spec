head: &head
  operationId: getTemporarySeasonalRatingsHeaders
  description: >
    Use to obtain the headers that would be returned for 
    `getTemporarySeasonalRatings`. Useful for cache invalidation.
  summary: Get HTTP headers
  tags: &tags
    - Temporary Seasonal Ratings
  parameters:
    - $ref: ../components/parameters/period-start-query.yaml
    - $ref: ../components/parameters/period-end.yaml
    - $ref: ../components/parameters/monitoring-set-filter.yaml
    - $ref: ../components/parameters/segment-filter.yaml
  responses:
    '200': &ok
      description: OK
      headers:
        $ref: ../components/headers/ETag-response.yaml
    '304': &not-modified
      description: The snapshot has not changed.
      headers:
        $ref: ../components/headers/ETag-response.yaml
    '400': &malformed
      description: Malformed request, based on misuse of filters.
      headers: &rate-limited
        $ref: ../components/headers/rate-limited.yaml
    '401': &unauthorized
      description: Unauthorized
      headers: *rate-limited
    '403': &forbidden
      description: Access denied
      headers: *rate-limited
    '404': &not-found
      description: The requested snapshot does not exist
      headers: *rate-limited
    '406': &not-acceptable
      description: Content negotiation failed
      headers: *rate-limited
    '410': &gone
      description: Gone. The requested forecast should be available in archive.
      headers: *rate-limited
    '429': &rate-limit-hit
      $ref: ../components/responses/rate-limit-hit-head.yaml
    '500': &unexpected-error
      description: An unexpected error occurred
      headers: *rate-limited
    default: *unexpected-error
  security: &read-authorization
    - oauth2-primary-flow:
        - read:temporary-seasonal-ratings

get:
  <<: *head
  operationId: getTemporarySeasonalRatings
  description: >
    Search for Temporary Seasonal Ratings.  Will return any Temporary Seasonal
    Ratings that overlap with the  start/end period.  

    Clients SHOULD perform Conditional `GET` using the `If-None-Match` header
    and the `ETag` of a previous `GET` response.
  # TODO: adjust language
  summary: Get Default Static Rating
  responses:
    '200':
      <<: *ok
      description: The requested default static rating is returned.
      content:
        application/vnd.trolie.temporary-seasonal-rating-set.v1+json:
          schema:
            $ref: ../components/schemas/temporary-rating-set.yaml
          example:
            - id: 46f7212b-1633-4c30-ba71-c6e987b2ded7
              segment-id: segmentX
              start-time: '2025-07-12T16:00:00-07:00'
              end-time: '2025-07-13T12:00:00-07:00'
              updated-time: '2025-07-08T13:05:43.044267100-07:00'
              values:
                - type: normal
                  value:
                    mva: 160
                - type: emergency
                  value:
                    mva: 165
                - type: load-shed
                  value:
                    mva: 170
              reason: Free-form text reason.
        application/json:
          schema:
            $ref: ../components/schemas/temporary-rating-set.yaml
    '304': *not-modified
    '400':
      <<: *malformed
      content:
        $ref: ../components/responses/content/problem.yaml
    '401': &unauthorized-empty
      <<: *unauthorized
      content: &empty
        $ref: ../components/responses/empty.yaml
    '403': &forbidden-empty
      <<: *forbidden
      content: *empty
    '404': &not-found-empty
      <<: *not-found
      content: *empty
    '406': &not-acceptable-empty
      <<: *not-acceptable
      content: *empty
    '410':
      <<: *gone
      content: *empty
    '429': *rate-limit-hit
    '500': &unexpected-error-message
      <<: *unexpected-error
      content: *empty
    default: *unexpected-error-message
  security: *read-authorization

post:
  operationId: createTemporarySeasonalRating
  description: &post_desc |
    Create a new temporary temporary seasonal rating
  summary: *post_desc
  tags: *tags
  requestBody:
    content:
      application/vnd.trolie.temporary-seasonal-rating.v1+json:
        schema:
          $ref: ../components/schemas/temporary-rating.yaml
        example:
          segment-id: segmentX
          start-time: '2025-07-12T16:00:00-07:00'
          end-time: '2025-07-13T12:00:00-07:00'
          values:
            - type: normal
              value:
                mva: 160
            - type: emergency
              value:
                mva: 165
            - type: load-shed
              value:
                mva: 170
          reason: Free-form text reason.
      application/json:
        schema:
          $ref: ../components/schemas/temporary-rating.yaml
  responses:
    '201':
      <<: *ok
      description: |
        The temporary Seasonal Rating was created
      content:
        application/vnd.trolie.temporary-seasonal-rating.v1+json:
          schema:
            $ref: ../components/schemas/temporary-rating.yaml
          example:
            id: 46f7212b-1633-4c30-ba71-c6e987b2ded7
            segment-id: segmentX
            start-time: '2025-07-12T16:00:00-07:00'
            end-time: '2025-07-13T12:00:00-07:00'
            updated-time: '2025-07-08T13:05:43.044267100-07:00'
            values:
              - type: normal
                value:
                  mva: 160
              - type: emergency
                value:
                  mva: 165
              - type: load-shed
                value:
                  mva: 170
            reason: Free-form text reason.
        application/json:
          schema:
            $ref: ../components/schemas/temporary-rating.yaml
      headers:
        X-Rate-Limit-Limit:
          $ref: ../components/headers/X-Rate-Limit-Limit.yaml
        X-Rate-Limit-Remaining:
          $ref: ../components/headers/X-Rate-Limit-Remaining.yaml
        X-Rate-Limit-Reset:
          $ref: ../components/headers/X-Rate-Limit-Reset.yaml
        ETag:
          $ref: ../components/headers/ETag.yaml
    '400':
      <<: *malformed
      description: >
        Malformed request, proposal is invalid.  Details are in error
        messages.  
    '401': *unauthorized-empty
    '403': *forbidden-empty
    '404': *not-found-empty
    '406': *not-acceptable-empty
    '413':
      $ref: ../components/responses/payload-too-large.yaml
    '422':
      $ref: ../components/responses/unprocessable.yaml
    '429': *rate-limit-hit
    '500': *unexpected-error-message
    default: *unexpected-error-message
  security:
    - oauth2-primary-flow:
        - write:temporary-seasonal-ratings
